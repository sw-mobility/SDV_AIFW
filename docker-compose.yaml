services:
  api-server:
    build:
      context: ./api
    ports:
      - "5002:5002"
    depends_on:
      - minio
      - mongodb
    volumes:
      - api-volume:/app/workspace/api
      - training-volume:/app/workspace/training
      - frontend-volume:/app/workspace/frontend
      - validation-volume:/app/workspace/validation
      - labeler-volume:/app/workspace/labeling
      - optimizing-volume:/app/workspace/optimizing
    networks:
      - testnet

  frontend:
    build:
      context: ./frontend
    ports:
      - "80:80"
    depends_on:
      - api-server
    volumes:
      - frontend-volume:/app/workspace/frontend
    networks:
      - testnet

  minio:
    image: quay.io/minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_CORE_BUCKET=keti-aifw
    networks:
      - testnet

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-data:/data/db
    networks:
      - testnet

  # -------------------- GPU-ENABLED SERVICES --------------------
  training:
    build:
      context: ./training
    shm_size: 8g
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    ports:
      - "5003:5003"
    volumes:
      - training-volume:/app/workspace/training
    depends_on:
      - api-server
      - mongodb
      - minio
      - optimizing
    networks:
      - testnet

  validation:
    build:
      context: ./validation
    shm_size: 8g
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    ports:
      - "5004:5004"
    volumes:
      - validation-volume:/app/workspace/validation
    depends_on:
      - api-server
      - mongodb
      - minio
      - optimizing
    networks:
      - testnet

  labeler:
    build:
      context: ./labeler
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - CONFIDENCE_THRESHOLD=0.25  # (optional) keep if you use it
    ports:
      - "5006:5006"
    volumes:
      - labeler-volume:/app/workspace/labeling
    depends_on:
      - api-server
      - mongodb
      - minio
      - optimizing
    networks:
      - testnet
  # -------------------------------------------------------------

  # optimizing:
  #   build:
  #     context: ./optimizing
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - api-server
  #     - mongodb
  #     - minio
  #   runtime: nvidia
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: all
  #             capabilities: [gpu]
  #   environment:
  #     - NVIDIA_VISIBLE_DEVICES=all
  #     - NVIDIA_DRIVER_CAPABILITIES=compute,utility
  #     - API_RESULT_URL=http://api-server:5002/optimizing/result
  #     - API_WORKDIR=/workspace/shared/jobs
  #   shm_size: 8g
  #   ports:
  #     - "5005:5005"
  #   volumes:
  #     - optimizing-volume:/app/workspace/optimizing
  #     - ./optimizing/int8_calib_images:/app/int8_calib_images:ro
  #   # Jetson DLA device nodes (keep for TRT+DLA)
  #   devices:
  #     - /dev/nvhost-ctrl-gpu
  #     - /dev/nvhost-ctrl-nvdla0
  #     - /dev/nvhost-ctrl-nvdla1
  #     - /dev/nvmap
  #   group_add:
  #     - "video"
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -x /usr/src/tensorrt/bin/trtexec ]"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #   networks:
  #     - testnet
  optimizing:
    build:
      context: ./optimizing
      dockerfile: Dockerfile
    depends_on:
      - api-server
      - mongodb
      - minio

    # Jetson: be explicit
    runtime: nvidia

    # (optional but fine to keep)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - API_RESULT_URL=http://api-server:5002/optimizing/result
      - API_WORKDIR=/workspace/shared/jobs
      - LD_LIBRARY_PATH=/usr/src/tensorrt/lib:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
      - PATH=/usr/src/tensorrt/bin:/usr/local/cuda/bin:$PATH

    shm_size: 8g
    # IMPORTANT: do not set a wrong working_dir. Either omit it, or match your Dockerfile.
    # working_dir: /workspace2/optimizing

    ports:
      - "5005:5005"

    volumes:
      - optimizing-volume:/app/workspace/optimizing
      - ./optimizing/int8_calib_images:/app/int8_calib_images:ro

    devices:
      - /dev/nvhost-ctrl-gpu
      - /dev/nvhost-ctrl-nvdla0
      - /dev/nvhost-ctrl-nvdla1
      - /dev/nvmap

    group_add:
      - "video"

    healthcheck:
      test: ["CMD-SHELL", "[ -x /usr/src/tensorrt/bin/trtexec ]"]
      interval: 30s
      timeout: 5s
      retries: 3

    networks:
      - testnet


  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=keti
      - ME_CONFIG_BASICAUTH_PASSWORD=keti
    depends_on:
      - mongodb
    networks:
      - testnet

volumes:
  api-volume:
  mongo-data:
  minio-data:
  frontend-volume:
  training-volume:
  labeler-volume:
  validation-volume:
  optimizing-volume:

networks:
  testnet:


